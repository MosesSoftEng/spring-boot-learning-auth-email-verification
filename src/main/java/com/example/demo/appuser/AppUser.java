package com.example.demo.appuser;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;
import java.util.Collections;

/*
 * User model.
 */

// * Lombok annotations
@Getter // Auto generate properties getters.
@Setter // Auto generate properties setters.
@EqualsAndHashCode // Auto generate Equals and HashCode methods for comparing objects.
@NoArgsConstructor // Auto generate an no argument constructor.

//* JPA Annotations
@Entity // Indicates that this class is a JPA entity.
//@Table
public class AppUser
        implements UserDetails // Add Spring security
{

    /*
     * Define user properties.
     */
    @Id //* JPA Annotation for marking a primary key in this case property id.

    //* JPA for autoincrement.
    @SequenceGenerator(
            name = "user_sequence",
            sequenceName = "user_sequence",
            allocationSize = 1
    )

    // JPA annotation for generating value.
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "user_sequence"
    )
    private Long id;

    private String firstName, lastName, email, password;

    //* JPA annotation to specify enum type.
    @Enumerated(EnumType.STRING)
    private UserRole userRole; // Enum
    private Boolean locked = false;
    private Boolean enabled = false; // Default values.

    /*
     * Constructors
     */
    //* No arguments constructor generated by lombock.

    public AppUser(
//            Long id, // Ignore if auto generated.
            String firstName,
            String lastName,
            String email,
            String password,
            UserRole userRole) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.userRole = userRole;
    }

    /*
     * Getter and setters for properties or use lombock
     */

    /*
     * Middleware
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority simpleGrantedAuthority =
                new SimpleGrantedAuthority(userRole.name());
        return Collections.singletonList(simpleGrantedAuthority);
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return email;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !locked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }
}
